//@version=6
indicator('Highlight Time', overlay = true, max_lines_count = 500)

// Symbols are eg: DJI, NAS, UK100, etc
symbol = syminfo.ticker

// Logging:
// Only on last bar & is newly generated bar
// So that the log is not clogged
// Ok nvm, when i switch to higher timeframe, it has no log, or waiting for one i dk
//      if barstate.islast and barstate.isnew       //
// This one will TRUE every tick.
if barstate.islast
    log.info(symbol + " " + timeframe.period)

time_m5 = request.security(syminfo.tickerid, "5", time)
my_timezone = "Asia/Kuala_Lumpur"
var current_symbol_timezone = "Asia/Kuala_Lumpur"

// Create input options
table_font_size_option = input.string(title = "Table Font Size", options = ["Tiny", "Small (default)", "Normal", "Large", "Huge", "Auto"], defval = "Small (default)" )
var table_font_size = size.small

if table_font_size_option == "Tiny"
    table_font_size := size.tiny
else if table_font_size_option == "Normal"
    table_font_size := size.normal
else if table_font_size_option == "Large"
    table_font_size := size.large
else if table_font_size_option == "Huge"
    table_font_size := size.huge
else if table_font_size_option == "Auto"
    table_font_size := size.auto







//
// Draw Trading Time
//
var bool is_daylight_saving = false
var dst_start = ""
var dst_end   = ""
var session_start = timestamp(my_timezone, year(time_m5, my_timezone), month(time_m5, my_timezone), dayofmonth(time_m5, my_timezone), 8, 0, 0)
var session_end   = timestamp(my_timezone, year(time_m5, my_timezone), month(time_m5, my_timezone), dayofmonth(time_m5, my_timezone), 24, 0, 0)
// I need to do this so that, it will get this variable updated as the script go thru the bar_index
// If not, this variable, will always be the 1st bar_index's one
session_start    := timestamp(my_timezone, year(time_m5, my_timezone), month(time_m5, my_timezone), dayofmonth(time_m5, my_timezone), 8, 0, 0)
session_end      := timestamp(my_timezone, year(time_m5, my_timezone), month(time_m5, my_timezone), dayofmonth(time_m5, my_timezone), 24, 0, 0)

// Default: from 8am to 12am, monday to sunday
var          session_time = "0800-2400"
const string session_days = ":1234567"
var my_session = session_time + session_days

if symbol == "JP225YJPY"
    session_time := "0800-1430"
    current_symbol_timezone := "GMT+9"
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 9, 0, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 15, 30, 0)

if symbol == "HK50"
    session_time := "0900-1600"
    current_symbol_timezone := "GMT+8"
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 9, 0, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 16, 0, 0)

if symbol == "CHINA50"
    session_time := "0900-1500"
    current_symbol_timezone := "GMT+8"
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 9, 0, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 15, 0, 0)

// From what i understand
// timestamp("1 Jan 2025") is the UNIX time since 1 Jan 1970 in UTC +0
// Hence, you should convert UNIX time into UTC+0 first
// Then, you convvert again to Malaysia time GMT+8
// Hence, 1 Jan 2025, will be converted to 8am 1 Jan 2025 to your timezone
// Hence, all these timestamp() will be TRUE after 6am in your timezone
if symbol == "AUS200"
    dst_start := "06 Oct 2024"
    dst_end   := "06 Apr 2025"
    current_symbol_timezone := syminfo.timezone
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 10, 0, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 16, 0, 0)
    if  time_m5 > timestamp("6 Oct 2024") and time_m5 < timestamp("6 Apr 2025")
        session_time := "0700-1300"
        is_daylight_saving := true
    else
        session_time := "0800-1400"
        is_daylight_saving := false


if symbol == "UK100" or symbol == "GER40"
    dst_start := "30 Mar 2025"
    dst_end   := "26 Oct 2025"
    // Originally was GMT+0
    // But i notice the countdown timer is 1 hour late
    // Hence I try GMT+1, now everything tally
    // This didn't affect background timing highlight
    current_symbol_timezone := "GMT+1"
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 8, 0, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 16, 30, 0)
    // Use "time" dont use "timenow"
    // "time" get the current bar index time
    // "timenow" get the current time regardless bar index
    if  time_m5 > timestamp("30 Mar 2025") and time_m5 < timestamp("26 Oct 2025")
        session_time := "1500-2330"
        is_daylight_saving := true
    else
        session_time := "1600-0030"
        is_daylight_saving := false

if symbol == "NAS100" or symbol == "US30" or symbol == "SP500"
    dst_start := "09 Mar 2025"
    dst_end   := "02 Nov 2025"
    current_symbol_timezone := syminfo.timezone
    session_start := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 9, 30, 0)
    session_end   := timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), 16, 0, 0)
    if  time_m5 > timestamp("09 Mar 2025") and time_m5 < timestamp("02 Nov 2025")
        session_time := "2130-0400"
        is_daylight_saving := true
    else
        session_time := "2230-0500"
        is_daylight_saving := false

my_session := session_time + session_days

// Check if the current time is within the specified range, in my timezone
inTimeRange = math.sign(nz(time(timeframe.period, my_session, my_timezone)))

// Plot the background color if the current time is within the range
bgcolor(inTimeRange > 0 ? color.new(color.blue, 90) : na, title = "My session")


if barstate.islast
    current_time = timestamp(current_symbol_timezone, year(time_m5, current_symbol_timezone), month(time_m5, current_symbol_timezone), dayofmonth(time_m5, current_symbol_timezone), hour(time_m5, current_symbol_timezone), minute(time_m5, current_symbol_timezone), second(time_m5, current_symbol_timezone))

    is_in_session = (current_time >= session_start and current_time < session_end)
    var countdown = current_time
    if is_in_session
        // if in session, calculate countdown to session close
        countdown := math.abs(session_end - current_time)
    else
        // else, calculate countdown to session start
        // check if pass session_end, if it is, then need to calculate based on session_start that is tomorrow's
        if current_time > session_end
            session_start := session_start + 86400000
        countdown := math.abs(current_time - session_start)
 
    // Convert to HH:mm format
    hours_left = math.floor(countdown / 1000 / 60 / 60)
    minutes_left = ((countdown / 1000 / 60 / 60) - hours_left) * 60
    formatted_time = str.tostring(hours_left, "00") + ":" + str.tostring(minutes_left, "00")

    // Draw daylight saving time table
    var dst_table = table.new(position = position.top_right, columns = 1, rows = 3, bgcolor = color.new(color.blue, 90), border_color=color.new(color.blue,50), border_width = 1)
    table.cell(table_id = dst_table, column = 0, row = 0, text_color=color.new(color.white, 30), bgcolor = is_daylight_saving ? color.new(color.purple, 80) : color.new(color.blue, 100), text_size = table_font_size, text = is_daylight_saving ? "Daylight Saving" : "Standard")
    table.cell(table_id = dst_table, column = 0, row = 1, text_color=color.new(color.white, 30), bgcolor = is_in_session      ? color.new(color.purple, 80) : color.new(color.blue, 100), text_size = table_font_size, text = session_time + " (" + str.tostring(formatted_time) +")")
    table.cell(table_id = dst_table, column = 0, row = 2, text_color=color.new(color.white, 30), bgcolor = is_daylight_saving ? color.new(color.purple, 80) : color.new(color.blue, 100), text_size = table_font_size, text = dst_start + " - " + dst_end)

















//
// Draw session break
// It will not draw on H4 and above time
//
var me_sessionBreak = 0
var draw_session_break = true
sessionBreak = time_tradingday

var four_hour = "240"
var daily = "1D"
var monthly = "1M"
var weekly = "1W"

if timeframe.period == four_hour
    draw_session_break := false
if timeframe.period == daily
    draw_session_break := false
if timeframe.period == monthly 
    draw_session_break := false
if timeframe.period == weekly
    draw_session_break := false

if draw_session_break
    if(sessionBreak!=me_sessionBreak)
        me_sessionBreak:=sessionBreak
        // label.new(x=bar_index, y=high, text="New Day")
        // no need bah i guess..
        // line.new(bar_index, low, bar_index, high, style = line.style_dashed)















//
// Draw ATH
// I realize that, if M5, the maximum candle is 5k
// Those ATH that is way before 5k candle, is missed
// Hence, the best way to draw ATH, is draw based on 12 Months timeframe
//

// Draw ATH on Yearly timeframe
// Request Highest for Yearly chart
var ATH = request.security(syminfo.tickerid, "12M", high)
ATH := math.max(high, ATH)

// But then i realize, if you on weekly chart, the value will be "NA"
// Not sure what happened but i guess, can put check if "NA", then draw 
// ATH based on current timeframe
if na(ATH)
    log.info("ATH is NA")
    ATH := high
    ATH := math.max(high, ATH)

// Plot the ATH on the M5 chart
plot_ATH = plot(ATH, color = color.new(color.yellow, 50), title = "ATH Plot", display = display.pane)
plot_price_low = plot(low, display = display.none, title = "Price Low Plot")
fill(plot_price_low, plot_ATH, color = color.new(color.yellow, 95), title = "ATH Fill")

























// ---------------
// Note for Friday
// ---------------

// Check if it's Friday on current bar open time
is_friday = dayofweek(time_m5, my_timezone) == dayofweek.friday 

// Note message input
var display_friday_note = input.bool(true, "Display Friday Note")
var force_display_note = input.bool(false, "Force Display Note")

sentence1 = input.text_area('(Based on last available candle)\nHey Yo!\nToday is Friday\nPlan 1 - FIFO trade only\nPlan 2 - No Trade', title = 'Friday Note')
sentence2 = input.text_area('(Based on last available candle)\nHey yo, <insert news here>\n1 - You might wanna set expiry earlier\n2 - Only do FIFO trade', title = 'Friday Note')

// Sticky Note Settings Input
tl1 = input.string('middle', title = 'Note Position', options = ['top', 'middle', 'bottom'], inline = '1')
tl2 = input.string('center', title = ''             , options = ['left', 'center', 'right'], inline = '1')
note_color = input.color(color(color.rgb(0, 145, 255, 50)), title = 'Note Color')

// Font Input
note_font_size_option = input.string('Small (default)'  , title = 'Note Font Size', options = ['Auto', 'Huge', 'Large', 'Normal', 'Small (default)', 'Tiny'])
note_font_color       = input.color (#fbfbfb, title = 'Note Font Color')

var note_font_size = size.small

if note_font_size_option == "Tiny"
    note_font_size := size.tiny
else if note_font_size_option == "Normal"
    note_font_size := size.normal
else if note_font_size_option == "Large"
    note_font_size := size.large
else if note_font_size_option == "Huge"
    note_font_size := size.huge
else if note_font_size_option == "Auto"
    note_font_size := size.auto



// Table
var table t1 = table.new(tl1 + '_' + tl2, 1, 10)
table t2 = table.new('bottom_right', 1, 10)

// Writing rows in the table.
// If sentence is empty, then row will be excluded from the table
if barstate.islast and is_friday and display_friday_note
    table.cell(t1, 0, 0, text = sentence1, bgcolor = note_color, text_color = note_font_color, text_halign = text.align_left, text_size = note_font_size)
if barstate.islast and force_display_note
    table.cell(t1, 0, 0, text = sentence2, bgcolor = note_color, text_color = note_font_color, text_halign = text.align_left, text_size = note_font_size)


// Display alert if Note is disabled. Only display on Non-Friday to remind myself to remember to turn it back on.
if not is_friday and not display_friday_note
    table.cell(t2, 0, 0, text = 'Note Disabled', bgcolor = color.red, text_color = note_font_color, text_halign = text.align_left, text_size = size.large)
